##preprocess.py

###Functions used

     - split_train_test():
    """
    Creates train and test data from the given dataset.

    Returns:
    no_users (int): Number of users in the dataset.
    no_movies (int): Number of movies in the dataset.
    """

     - form_sparse_matrix(type, shape):
    """
    Creats the sparse matrix from input data and saves it to data_sparse.npz

    Parameters:
    type (str): Type of file to be processed. Allowed values are 'train', 'test' and 'all'.
    shape (tuple): Shape of the sparse matrix in the form (no_users, no_movies)

    Returns:
    sparse_matrix (csr_matrix): Sparse matrix created from the input file.
    """

     - normalize(sparse_matrix, type):
    """
    Normalizes the sparse matrix by subtracting row mean from each non zero value,
    and saves the normalized matrix to data_sparse_normalized.npz

    Parameters:
    sparse_matrix (csr_matrix): Sparse matrix to be normalized.
    type (str): Type of file to be processed. Allowed values are 'train', 'test' and 'all'.
    """

     - main():
    """
    Splits the input dataset into train and test data, creates and saves the sparse matrices,
    and normalizes them by subtracting row means from each non zero value.
    """ 

##recommend.py
     This file loads processed data and runs all the recommendation techniques and calculates run-time, RMSE, Spearman correlation and precison on top k metrics for each techniques.

###Functions used

     - rmse_spearman(matrix_predicted, matrix_actual, path):
    """
    Calculates the RMSE error and Spearman correlation between the predicted and actual matrices.

    Args:
        matrix_predicted (numpy.ndarray): The predicted matrix.
        matrix_actual (numpy.ndarray): The actual matrix.
        path (str): The path to the file containing the indices of the elements to be considered.

    Returns:
        None
    """
     - precision_on_top_k(matrix_predicted, matrix_actual, k = 100):

    """
    Calculates the precision on top k based on the predicted and actual matrices.

    Args:
        matrix_predicted (numpy.ndarray): The predicted matrix.
        matrix_actual (numpy.ndarray): The actual matrix.
        k (int): The number of top elements to consider. Default value is 100.

    Returns:
        None
    """

     - main():
    """
    The main function that loads the matrices, performs collaborative filtering with and without baseline approach,
    performs SVD and CUR factorization, and prints out the RMSE error, Spearman correlation and precision on top k for
    each method.

    Args:
        None

    Returns:
        None
    """

     - get_sparse_path(name, normalized = False):
    """
    Returns the path of the sparse matrix given its name and normalized flag.

    Parameters:
    name (str): Name of the sparse matrix.
    normalized (bool): Flag indicating whether the matrix is normalized or not.

    Returns:
    str: Path of the sparse matrix.
    """
     - get_sparse_path_by_type(type, normalized = False):
    """
    Returns the path of the sparse matrix given its type and normalized flag.

    Parameters:
    type (str): Type of the sparse matrix ('train', 'test', or 'all').
    normalized (bool): Flag indicating whether the matrix is normalized or not.

    Returns:
    str: Path of the sparse matrix.
    
    Raises:
    ValueError: If an invalid value for the 'type' parameter is provided.
    """

     - load_sparse_matrix(type, normalized = False):
    """
    Loads the sparse matrix given its type and normalized flag.

    Parameters:
    type (str): Type of the sparse matrix ('train', 'test', or 'all').
    normalized (bool): Flag indicating whether the matrix is normalized or not.

    Returns:
    scipy.sparse.csr_matrix: The loaded sparse matrix.
    """

     - get_txt_path(name):
    """
    Returns the path of the text file given its name.

    Parameters:
    name (str): Name of the text file.

    Returns:
    str: Path of the text file.
    """

     - get_txt_path_by_type(type):
    """
    Returns the path of the text file given its type.

    Parameters:
    type (str): Type of the sparse matrix ('train', 'test', or 'all').

    Returns:
    str: Path of the text file.
    
    Raises:
    ValueError: If an invalid value for the 'type' parameter is provided.
    """

## collaborative.py
    This file is used to predict movie based on item-item collaborative filtering. 150 closest neighbors were considered while calculating rating.

### Functions Used:

    - collaborative_filtering(sparse_matrix, sparse_matrix_original, sparse_matrix_test_original, k, baseline = False):  
    """
    Perform collaborative filtering on the sparse_matrix being sent.
    
    Args:
    sparse_matrix (numpy.ndarray): Sparse matrix on which collaborative filtering needs to be performed.
    sparse_matrix_original (numpy.ndarray): Original sparse matrix.
    sparse_matrix_test_original (numpy.ndarray): Original test sparse matrix.
    k (int): Number of similar users to consider for each user.
    baseline (bool, optional): Whether to use baseline approach. Default is False.
    
    Returns:
    numpy.ndarray: Collaborative matrix after performing collaborative filtering.
    """

## svd.py
    This file is used to predict movie based on SVD Decomposition Matrix approach.
    
### Functions Used:
    
    - svd(sparse_mat, num_singular_values, energy=1):
    """
    Perform SVD Decomposition on the input sparse_mat
    Pass the copy of the sparse matrix to keep the original matrix unchanged

    Parameters:
    sparse_mat : input sparse_mat
    num_singular_values: number of largest singular values desired
    energy: retain energy% of largest singular values

    Returns : The dot product of U S and Vt matrix
    """

    - svd_retain_energy(sparse_mat, num_singular_values, energy=1):
    """
    Perform SVD on a sparse matrix and retain a certain percentage of the largest singular values

    Parameters:
    sparse_mat : sparse matrix to be decomposed
    num_singular_values : number of singular values to retain
    energy : percentage of energy to retain (default 1)

    Returns:
    U : left singular vectors
    Sigma : singular values
    Vt : right singular vectors transposed
    """

    - svd_sparse(sparse_mat, num_singular_values):
    """
    Perform SVD on a sparse matrix using the eigsh method

    Parameters:
    sparse_mat : sparse matrix to be decomposed
    num_singular_values : number of singular values to retain

    Returns:
    U_large : left singular vectors
    sigma : singular values
    Vt_large : right singular vectors transposed
    """
        
## cur.py
    This file is used to predict movie based on CUR Decomposition Matrix approach.
        
### Functions Used:
        
    - cur(sparse_matrix, no_cols, no_eigen_values, energy = 1):
    """
    Perform CUR Decomposition on the input sparse_matrix

    Parameters:
    sparse_matrix : input sparse_matrix
    no_cols: number of columns and rows to select
    no_eigen_values: number of largest eigen values desired while performing SVD on W matrix
    energy: retain energy% of largest eigen values

    Returns : The dot product of C U and R matrix
    """

    - intersection_sparse(sparse_matrix, rows_list_original, cols_list_original):
    """
    Parameters:
    sparse_matrix: the original matrix in sparse form
    rows_prob: a list of the indices of the selected rows for R matrix
    col_list: a list of the indices of the selected columns for C matrix

    Returns:
    sparse matrix W such that W consists of elements sparse_matrix[i,j] for all i, j in rows_list, cols_list respectively
    """




